Concurrency on the JVM and the Java Memory Model

1. Processes and Threads
2. Monitors and synchronization
    a) Deadlocks
    synchronized - powoduje, ze modyfikacje danych przez watek sa widoczne dla innych oraz ogranicza dostep do chronionych zasobow

    b) Guarded blocks
    Proces JVM-owy nie zostaje zakończony wtedy gdy wątek Main zostanie przerwany.
    Dzieje się to dopiero wtedy gdy wszystkie non-deamon wątki zostają zakończone (wątek Main to nie jedyny wątek jaki zostaje utworzony podczas odpalenia procesu JVM-owego).

    Guaded block - jest to chroniony kod z uzyciem synchronized, w ramach ktorego warunek zostaje sprawdzany w petli poprzedzajacej wywolanie metody wait na obiekcie
    Jest to istotne aby dzialo sie w petli, poniewaz JVM jest zdolny do wybudzenia watku pomimo tego, ze metoda notify nie zostala wywolana.
    To zjawisko jest okreslane jako spurious wakeups.

    c) Interrupting threads and the graceful shutdown
3. Volatile variables
4. The Java Memory Model

Podsumowanie
W tym rodziale pokazane zostały następujace rzeczy:
1. W jaki sposób tworzyć i startować wątki oraz czekać na ich zakończenie.
2. W jaki sposób, modyfikując współdzieloną pamieć, komunikować się miedz wątkami oraz używając synchronized i co to oznacza, że wątek jest zablokowany.
3. W jaki sposób zapobiegać deadlockom poprzez wykonanie porządku na lockach (ordering) oraz wykorzystaniu guarded-blocków na rzecz busy-waiting.
4. W jaki sposób zaimplementować graceful shutdown wątku i kiedy komuikować się z użyciem zmiennych volatile.
5. Dowiedzieliśmy się, że jedyna słuszna formą wnioskowania na temat działania programów współbieżnych działa w oparciu o regułę happens-before zdefiniowaną przez JMM.